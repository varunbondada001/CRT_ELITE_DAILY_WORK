//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
//Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Notice that the solution set must not contain duplicate triplets.

//CODE
import java.util.* ;
import java.io.*;
public class Solution {
public static ArrayList<ArrayList<Integer>> findTriplets(int[] arr, int n, int K)  {
Arrays.sort(arr);
HashSet<ArrayList<Integer>>map=new HashSet<>();
for(int i=0;i<n;i++){
int left=i+1;
int right=n-1;
int sum=K-arr[i];
while(left<right){
   if((arr[left]+arr[right])==sum){
      ArrayList<Integer>one=new ArrayList<>();
      one.add(arr[i]);
      one.add(arr[left]);
      one.add(arr[right]);
      map.add(one);
      left++;
  }else if((arr[left]+arr[right])<sum){
      left++;
  }else if((arr[left]+arr[right])>sum){
      right--;
      }
   }
}
ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
ans.addAll(map);
return ans;
   }
}

