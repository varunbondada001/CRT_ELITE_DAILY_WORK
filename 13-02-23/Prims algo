class pair{
        int node;
        int weight;
        public pair(int node,int weight){
            this.node = node;
            this.weight = weight;
        }
    }


 
    
class Solution{
    

 static int spanningTree(int V, int E, int edges[][]){
         List<List<pair>> list = new ArrayList<>();
        for(int i=0;i<V;i++){
            List<pair> temp = new ArrayList<>();
            list.add(temp);
        }
        //ADJACENCY LIST
       for(int i=0;i<edges.length;i++){
             list.get(edges[i][0]).add(new pair(edges[i][1],edges[i][2]));
             list.get(edges[i][1]).add(new pair(edges[i][0],edges[i][2]));
     }
     // BASE CASE
      PriorityQueue<pair> pq = new PriorityQueue<pair>((a,b) -> {
         if(a.weight == b.weight){
             return a.node - b.node;
         }
         return a.weight - b.weight;
     });
     int[] vis = new int[V];
     
     pq.add(new pair(0 , 0));
     int sum = 0;
     while(pq.size()!=0){
        int node = pq.peek().node;
        int weight = pq.peek().weight;
         pq.poll();
         if(vis[node] == 1) continue;
             vis[node] = 1;
             sum += weight;
             for(int i=0;i<list.get(node).size();i++){
                 int adjNode = list.get(node).get(i).node;;
                 int adjW = list.get(node).get(i).weight;
                 if(vis[adjNode] != 1){
                    pq.add(new pair(adjNode,adjW));

                 }
         }
     }
     
     return sum;
 }
}
